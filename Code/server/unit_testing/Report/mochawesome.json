{
  "stats": {
    "suites": 11,
    "tests": 68,
    "passes": 61,
    "pending": 0,
    "failures": 7,
    "start": "2024-12-01T16:54:32.326Z",
    "end": "2024-12-01T16:54:32.532Z",
    "duration": 206,
    "testsRegistered": 68,
    "passPercent": 89.70588235294117,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "62b8ff82-da4e-4ff9-9f70-3e8a59c4f4bc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
          "title": "addProduct Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\AddProductController\\addproduct.test.js",
          "file": "\\unit_testing\\test_cases\\AddProductController\\addproduct.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"addProduct Controller\"",
              "fullTitle": "addProduct Controller \"before each\" hook in \"addProduct Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock request and response objects\nreq = {\n    body: {},\n};\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub(),\n};\n// Stub Product save method\nproductStub = sinon.stub(Product.prototype, 'save');",
              "err": {},
              "uuid": "9def224b-05e9-41dd-9d4e-d0cd5c06692c",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"addProduct Controller\"",
              "fullTitle": "addProduct Controller \"after each\" hook in \"addProduct Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4bfedcd1-4774-4c36-b81f-3a15bb2517be",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if Product ID is missing",
              "fullTitle": "addProduct Controller should return 400 if Product ID is missing",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product ID is required.' })).to.be.true;",
              "err": {},
              "uuid": "d2638491-0d90-4878-82d1-51f3d3d3a5b1",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if category is missing",
              "fullTitle": "addProduct Controller should return 400 if category is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Category is required.' })).to.be.true;",
              "err": {},
              "uuid": "dfc3f7a6-902c-4d55-b0d4-539de54295bf",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should save product and return 200 if all fields are valid",
              "fullTitle": "addProduct Controller should save product and return 200 if all fields are valid",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nproductStub.resolves(); // Simulate successful save\nawait addProduct(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Product added successfully.',\n    product: req.body,\n})).to.be.true;",
              "err": {},
              "uuid": "213c323e-f396-413c-aa7f-e81a3e04868e",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a database error",
              "fullTitle": "addProduct Controller should return 500 if there is a database error",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nproductStub.rejects(new Error('Database error')); // Simulate save failure\nawait addProduct(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ message: 'Database error' })).to.be.true;",
              "err": {},
              "uuid": "ee721d36-28a0-470a-a41b-0d2ed4bd5b91",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if Product ID is missing",
              "fullTitle": "addProduct Controller should return 400 if Product ID is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product ID is required.' })).to.be.true;",
              "err": {},
              "uuid": "0ff52f5f-a79c-4260-b1ef-e2ad30b058a6",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should save product and return 200 if all fields are valid",
              "fullTitle": "addProduct Controller should save product and return 200 if all fields are valid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nproductStub.resolves(); // Simulate successful save\nawait addProduct(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Product added successfully.',\n    product: req.body,\n})).to.be.true;",
              "err": {},
              "uuid": "5777f5e0-6bd0-42a6-bc9b-5bda725df066",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if category is missing",
              "fullTitle": "addProduct Controller should return 400 if category is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Category is required.' })).to.be.true;",
              "err": {},
              "uuid": "82aa3570-574b-4149-906e-49ac0cd25097",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if Product URL is missing",
              "fullTitle": "addProduct Controller should return 400 if Product URL is missing",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product URL is required.' })).to.be.true;",
              "err": {},
              "uuid": "1ee291a2-e099-4a14-a2d0-fca9df9cfe1c",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if Detail URL is missing",
              "fullTitle": "addProduct Controller should return 400 if Detail URL is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Detail URL is required.' })).to.be.true;",
              "err": {},
              "uuid": "f72cebc9-f562-4844-a839-1fa1274dbf2e",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if Product title is missing",
              "fullTitle": "addProduct Controller should return 400 if Product title is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product title is required.' })).to.be.true;",
              "err": {},
              "uuid": "09386ec3-fda1-4698-88af-f699f369fdb6",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if Product price is missing",
              "fullTitle": "addProduct Controller should return 400 if Product price is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product price is required.' })).to.be.true;",
              "err": {},
              "uuid": "043a7e3a-58a4-44d1-9509-c3ba50dfd75b",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if Product quantity is missing",
              "fullTitle": "addProduct Controller should return 400 if Product quantity is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    description: 'This is a sample product',\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product quantity is required.' })).to.be.true;",
              "err": {},
              "uuid": "ead7c73c-8355-41b3-b806-9d786f1d1615",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if Product description is missing",
              "fullTitle": "addProduct Controller should return 400 if Product description is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n};\nawait addProduct(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product description is required.' })).to.be.true;",
              "err": {},
              "uuid": "1323ca3f-eb16-43be-98d1-10dbcf637c3c",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a database error",
              "fullTitle": "addProduct Controller should return 500 if there is a database error",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    id: '12345',\n    category: 'Electronics',\n    url: 'http://example.com/product',\n    detailUrl: 'http://example.com/product/detail',\n    title: { shortTitle: 'Smartphone', longTitle: 'Latest Smartphone' },\n    price: { mrp: 15000, cost: 12000, discount: '20%' },\n    quantity: 100,\n    description: 'This is a sample product',\n};\nproductStub.rejects(new Error('Database error')); // Simulate save failure\nawait addProduct(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ message: 'Database error' })).to.be.true;",
              "err": {},
              "uuid": "48bf66aa-5791-45fc-872a-1efe3da7478f",
              "parentUUID": "006440fb-e8c5-4439-a4e8-5d792462e0e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2638491-0d90-4878-82d1-51f3d3d3a5b1",
            "dfc3f7a6-902c-4d55-b0d4-539de54295bf",
            "213c323e-f396-413c-aa7f-e81a3e04868e",
            "ee721d36-28a0-470a-a41b-0d2ed4bd5b91",
            "0ff52f5f-a79c-4260-b1ef-e2ad30b058a6",
            "5777f5e0-6bd0-42a6-bc9b-5bda725df066",
            "82aa3570-574b-4149-906e-49ac0cd25097",
            "1ee291a2-e099-4a14-a2d0-fca9df9cfe1c",
            "f72cebc9-f562-4844-a839-1fa1274dbf2e",
            "09386ec3-fda1-4698-88af-f699f369fdb6",
            "043a7e3a-58a4-44d1-9509-c3ba50dfd75b",
            "ead7c73c-8355-41b3-b806-9d786f1d1615",
            "1323ca3f-eb16-43be-98d1-10dbcf637c3c",
            "48bf66aa-5791-45fc-872a-1efe3da7478f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6efabe31-55b3-4a5f-9c5f-44a734160998",
          "title": "addToCart Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\CartController\\addtocart.test.js",
          "file": "\\unit_testing\\test_cases\\CartController\\addtocart.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"addToCart Controller\"",
              "fullTitle": "addToCart Controller \"before each\" hook in \"addToCart Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { body: {} }; // Mock request object\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub(),\n}; // Mock response object\nuserStub = sinon.stub(User, 'findOne'); // Stub User.findOne\nproductStub = sinon.stub(Product, 'findById'); // Stub Product.findById\nsaveStub = sinon.stub(); // Stub save method",
              "err": {},
              "uuid": "94b18bda-189e-4350-915e-ea603c1a213c",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"addToCart Controller\"",
              "fullTitle": "addToCart Controller \"after each\" hook in \"addToCart Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore(); // Restore original methods after each test",
              "err": {},
              "uuid": "0be10b18-0984-4c8b-94f9-9dd71499d62b",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if username or product ID is missing",
              "fullTitle": "addToCart Controller should return 400 if username or product ID is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { quantity: 2 }; // Missing username and product ID\nawait addToCart(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Username and Product ID are required.' })).to.be.true;",
              "err": {},
              "uuid": "08ffb2c2-4879-4070-a375-df0055e5487a",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user is not found",
              "fullTitle": "addToCart Controller should return 404 if user is not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'nonexistentUser', id: '12345', quantity: 2 };\nuserStub.resolves(null); // Simulate user not found\nawait addToCart(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'User not found.' })).to.be.true;",
              "err": {},
              "uuid": "018d6832-8aa6-44ef-8e4d-b6b5b33179e1",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if product is not found",
              "fullTitle": "addToCart Controller should return 404 if product is not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345', quantity: 2 };\nuserStub.resolves({ cart: [] }); // User exists\nproductStub.resolves(null); // Product not found\nawait addToCart(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product not found.' })).to.be.true;",
              "err": {},
              "uuid": "8201821b-f4f2-492a-ae4c-443706d54752",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the quantity if the product is already in the cart",
              "fullTitle": "addToCart Controller should update the quantity if the product is already in the cart",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345', quantity: 2 };\nconst user = {\n    cart: [{ productId: '12345', quantity: 1 }],\n    save: saveStub,\n};\nuserStub.resolves(user); // User exists\nproductStub.resolves({ id: '12345' }); // Product exists\nawait addToCart(req, res);\nexpect(user.cart[0].quantity).to.equal(3); // Quantity updated\nexpect(saveStub.calledOnce).to.be.true; // User's save method called\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Product added to cart successfully.',\n    cart: user.cart,\n})).to.be.true;",
              "err": {},
              "uuid": "174a85b1-7bfe-49bb-86ed-91fb41c92c71",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new product to the cart if not already present",
              "fullTitle": "addToCart Controller should add a new product to the cart if not already present",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345', quantity: 2 };\nconst user = {\n    cart: [],\n    save: saveStub,\n};\nuserStub.resolves(user); // User exists\nproductStub.resolves({ id: '12345' }); // Product exists\nawait addToCart(req, res);\nexpect(user.cart.length).to.equal(1); // One item added\nexpect(user.cart[0]).to.deep.equal({ productId: '12345', quantity: 2 }); // Correct product and quantity\nexpect(saveStub.calledOnce).to.be.true; // User's save method called\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Product added to cart successfully.',\n    cart: user.cart,\n})).to.be.true;",
              "err": {},
              "uuid": "313b7652-b694-41a1-a350-95ff1b66029c",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "addToCart Controller should return 500 if there is a server error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345', quantity: 2 };\nuserStub.rejects(new Error('Database error')); // Simulate database error\nawait addToCart(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Internal Server Error',\n    error: 'Database error',\n})).to.be.true;",
              "err": {},
              "uuid": "af4a4970-89a4-4f70-a02e-f2d7bb4e1a29",
              "parentUUID": "6efabe31-55b3-4a5f-9c5f-44a734160998",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08ffb2c2-4879-4070-a375-df0055e5487a",
            "018d6832-8aa6-44ef-8e4d-b6b5b33179e1",
            "8201821b-f4f2-492a-ae4c-443706d54752",
            "174a85b1-7bfe-49bb-86ed-91fb41c92c71",
            "313b7652-b694-41a1-a350-95ff1b66029c",
            "af4a4970-89a4-4f70-a02e-f2d7bb4e1a29"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e63c4272-cdf7-4004-b54c-50e53ac04188",
          "title": "clearCart Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\CartController\\clearcart.test.js",
          "file": "\\unit_testing\\test_cases\\CartController\\clearcart.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"clearCart Controller\"",
              "fullTitle": "clearCart Controller \"before each\" hook in \"clearCart Controller\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { body: {} };\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub(),\n};\nuserStub = sinon.stub(User, 'findOne');\nsaveStub = sinon.stub();",
              "err": {},
              "uuid": "beabc96e-d4b9-4b34-a9be-a98a1ee08b37",
              "parentUUID": "e63c4272-cdf7-4004-b54c-50e53ac04188",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"clearCart Controller\"",
              "fullTitle": "clearCart Controller \"after each\" hook in \"clearCart Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b4443c21-a7f7-46c3-818a-482f64fdf29d",
              "parentUUID": "e63c4272-cdf7-4004-b54c-50e53ac04188",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if username is missing",
              "fullTitle": "clearCart Controller should return 400 if username is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {}; // Missing username\nawait clearCart(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Username is required.' })).to.be.true;",
              "err": {},
              "uuid": "0a16e976-8bac-464c-903f-60fd8b3fbe0e",
              "parentUUID": "e63c4272-cdf7-4004-b54c-50e53ac04188",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user is not found",
              "fullTitle": "clearCart Controller should return 404 if user is not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'nonexistentUser' };\nuserStub.resolves(null); // User not found\nawait clearCart(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'User not found.' })).to.be.true;",
              "err": {},
              "uuid": "cce892e8-c8c6-4273-aa0c-7394216d34e9",
              "parentUUID": "e63c4272-cdf7-4004-b54c-50e53ac04188",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should clear the user cart successfully",
              "fullTitle": "clearCart Controller should clear the user cart successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser' };\nconst existingUser = {\n    cart: [{ productId: '12345', quantity: 2 }],\n    save: saveStub,\n};\nuserStub.resolves(existingUser); // User found\nawait clearCart(req, res);\nexpect(existingUser.cart).to.deep.equal([]); // Cart should be cleared\nexpect(saveStub.calledOnce).to.be.true; // User saved\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Cart cleared successfully.',\n})).to.be.true;",
              "err": {},
              "uuid": "23095748-2924-4f07-938d-787397a48204",
              "parentUUID": "e63c4272-cdf7-4004-b54c-50e53ac04188",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "clearCart Controller should return 500 if there is a server error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser' };\nuserStub.rejects(new Error('Database error')); // Simulate a database error\nawait clearCart(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Internal Server Error',\n    error: 'Database error',\n})).to.be.true;",
              "err": {},
              "uuid": "5ec9b986-6549-4151-8614-706b830ac6e2",
              "parentUUID": "e63c4272-cdf7-4004-b54c-50e53ac04188",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a16e976-8bac-464c-903f-60fd8b3fbe0e",
            "cce892e8-c8c6-4273-aa0c-7394216d34e9",
            "23095748-2924-4f07-938d-787397a48204",
            "5ec9b986-6549-4151-8614-706b830ac6e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ecf542d4-1188-4922-ab70-c298801a981b",
          "title": "getCart Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\CartController\\getcart.test.js",
          "file": "\\unit_testing\\test_cases\\CartController\\getcart.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getCart Controller\"",
              "fullTitle": "getCart Controller \"before each\" hook in \"getCart Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { params: {} };\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub(),\n};\nuserStub = sinon.stub(User, 'findOne');",
              "err": {},
              "uuid": "d44017a2-21af-4fd3-82d4-b34eec00d6dc",
              "parentUUID": "ecf542d4-1188-4922-ab70-c298801a981b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getCart Controller\"",
              "fullTitle": "getCart Controller \"after each\" hook in \"getCart Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5af1eb73-5901-44c9-8260-79cb2027e1cc",
              "parentUUID": "ecf542d4-1188-4922-ab70-c298801a981b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 404 if user is not found",
              "fullTitle": "getCart Controller should return 404 if user is not found",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.params = { username: 'nonexistentUser' };\nuserStub.resolves(null);\nawait getCart(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'User not found.' })).to.be.true;",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/LABs/Sem-5_SE_Project/Project/Software-Engineering-Project/Codes/server/unit_testing/test_cases/CartController/getcart.test.js:28:49)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "308ee86f-5285-4e78-9e86-d9e4443b2986",
              "parentUUID": "ecf542d4-1188-4922-ab70-c298801a981b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the user cart if the user is found",
              "fullTitle": "getCart Controller should return the user cart if the user is found",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.params = { username: 'existingUser' };\nconst userCart = [\n    { productId: { id: '12345', title: { name: 'Product 1' } }, quantity: 2 },\n    { productId: { id: '67890', title: { name: 'Product 2' } }, quantity: 1 },\n];\nconst user = {\n    username: 'existingUser',\n    cart: userCart,\n    populate: sinon.stub().resolvesThis(),\n};\nuserStub.resolves(user);\nawait getCart(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({ cart: userCart })).to.be.true;",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/LABs/Sem-5_SE_Project/Project/Software-Engineering-Project/Codes/server/unit_testing/test_cases/CartController/getcart.test.js:49:49)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "d5efb4ef-56ca-4076-9650-a374c2707da5",
              "parentUUID": "ecf542d4-1188-4922-ab70-c298801a981b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "getCart Controller should return 500 if there is a server error",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.params = { username: 'existingUser' };\nuserStub.rejects(new Error('Database error'));\nawait getCart(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Internal Server Error',\n    error: 'Database error',\n})).to.be.true;",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/LABs/Sem-5_SE_Project/Project/Software-Engineering-Project/Codes/server/unit_testing/test_cases/CartController/getcart.test.js:63:18)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "f576008a-d748-4901-bfe7-5e9affef4ec7",
              "parentUUID": "ecf542d4-1188-4922-ab70-c298801a981b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "308ee86f-5285-4e78-9e86-d9e4443b2986",
            "d5efb4ef-56ca-4076-9650-a374c2707da5",
            "f576008a-d748-4901-bfe7-5e9affef4ec7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c4e34a6a-f748-4d26-a489-895b6187c703",
          "title": "removeFromCart Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\CartController\\removefromcart.test.js",
          "file": "\\unit_testing\\test_cases\\CartController\\removefromcart.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"removeFromCart Controller\"",
              "fullTitle": "removeFromCart Controller \"before each\" hook in \"removeFromCart Controller\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { body: {} };\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub(),\n};\nuserStub = sinon.stub(User, 'findOne');\nsaveStub = sinon.stub();",
              "err": {},
              "uuid": "354b9e8a-d7f7-4578-940b-2ca12faec63b",
              "parentUUID": "c4e34a6a-f748-4d26-a489-895b6187c703",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"removeFromCart Controller\"",
              "fullTitle": "removeFromCart Controller \"after each\" hook in \"removeFromCart Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e68e3ee3-2b76-4d4b-94fb-7fb08dd37ef2",
              "parentUUID": "c4e34a6a-f748-4d26-a489-895b6187c703",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if username or product ID is missing",
              "fullTitle": "removeFromCart Controller should return 400 if username or product ID is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'testUser' }; // Missing id\nawait removeFromCart(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Username and Product ID are required.' })).to.be.true;",
              "err": {},
              "uuid": "4c8677a0-da53-44c4-ad6a-488e45d2b84d",
              "parentUUID": "c4e34a6a-f748-4d26-a489-895b6187c703",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user is not found",
              "fullTitle": "removeFromCart Controller should return 404 if user is not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'nonexistentUser', id: '12345' };\nuserStub.resolves(null); // User not found\nawait removeFromCart(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'User not found.' })).to.be.true;",
              "err": {},
              "uuid": "c7dbaba1-7b14-423e-b81f-53cf08732299",
              "parentUUID": "c4e34a6a-f748-4d26-a489-895b6187c703",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the product from the cart if it exists",
              "fullTitle": "removeFromCart Controller should remove the product from the cart if it exists",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345' };\nconst existingUser = {\n    cart: [{ productId: '12345', quantity: 2 }, { productId: '67890', quantity: 1 }],\n    save: saveStub,\n};\nuserStub.resolves(existingUser);\nawait removeFromCart(req, res);\nexpect(existingUser.cart).to.deep.equal([{ productId: '67890', quantity: 1 }]); // Product removed\nexpect(saveStub.calledOnce).to.be.true; // User saved\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Product removed from cart.',\n    cart: existingUser.cart,\n})).to.be.true;",
              "err": {},
              "uuid": "3f048752-205f-4779-8ebf-92c4cb3f80f5",
              "parentUUID": "c4e34a6a-f748-4d26-a489-895b6187c703",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do nothing if the product is not in the cart",
              "fullTitle": "removeFromCart Controller should do nothing if the product is not in the cart",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '99999' }; // Product not in cart\nconst existingUser = {\n    cart: [{ productId: '12345', quantity: 2 }],\n    save: saveStub,\n};\nuserStub.resolves(existingUser);\nawait removeFromCart(req, res);\nexpect(existingUser.cart).to.deep.equal([{ productId: '12345', quantity: 2 }]); // Cart remains the same\nexpect(saveStub.calledOnce).to.be.true; // User saved\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Product removed from cart.',\n    cart: existingUser.cart,\n})).to.be.true;",
              "err": {},
              "uuid": "07526980-f94d-4160-864a-6de0dcc6b842",
              "parentUUID": "c4e34a6a-f748-4d26-a489-895b6187c703",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "removeFromCart Controller should return 500 if there is a server error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345' };\nuserStub.rejects(new Error('Database error')); // Simulate a database error\nawait removeFromCart(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Internal Server Error',\n    error: 'Database error',\n})).to.be.true;",
              "err": {},
              "uuid": "23fb1758-6f05-4dbd-b0c6-a6bcb0b9e3d6",
              "parentUUID": "c4e34a6a-f748-4d26-a489-895b6187c703",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c8677a0-da53-44c4-ad6a-488e45d2b84d",
            "c7dbaba1-7b14-423e-b81f-53cf08732299",
            "3f048752-205f-4779-8ebf-92c4cb3f80f5",
            "07526980-f94d-4160-864a-6de0dcc6b842",
            "23fb1758-6f05-4dbd-b0c6-a6bcb0b9e3d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73f48987-2b02-41a9-b297-d713a234b917",
          "title": "updateCartItem Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\CartController\\updatecartitem.test.js",
          "file": "\\unit_testing\\test_cases\\CartController\\updatecartitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"updateCartItem Controller\"",
              "fullTitle": "updateCartItem Controller \"before each\" hook in \"updateCartItem Controller\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { body: {} };\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub(),\n};\nuserStub = sinon.stub(User, 'findOne');\nsaveStub = sinon.stub();",
              "err": {},
              "uuid": "2da84e0f-ad5a-4ecc-88c3-b0bb5b11ec03",
              "parentUUID": "73f48987-2b02-41a9-b297-d713a234b917",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"updateCartItem Controller\"",
              "fullTitle": "updateCartItem Controller \"after each\" hook in \"updateCartItem Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b085e141-e77f-4c28-90b8-c642de99abd5",
              "parentUUID": "73f48987-2b02-41a9-b297-d713a234b917",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if username, product ID, or quantity is missing",
              "fullTitle": "updateCartItem Controller should return 400 if username, product ID, or quantity is missing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'testUser', id: '12345' }; // Missing quantity\nawait updateCartItem(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Username, Product ID, and quantity are required.' })).to.be.true;",
              "err": {},
              "uuid": "e2f6d266-960c-405b-864f-1d3c65d9c54e",
              "parentUUID": "73f48987-2b02-41a9-b297-d713a234b917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user is not found",
              "fullTitle": "updateCartItem Controller should return 404 if user is not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'nonexistentUser', id: '12345', quantity: 2 };\nuserStub.resolves(null); // User not found\nawait updateCartItem(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'User not found.' })).to.be.true;",
              "err": {},
              "uuid": "9cf136dd-9cca-4ff0-98d9-9111064dddd8",
              "parentUUID": "73f48987-2b02-41a9-b297-d713a234b917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if product is not found in cart",
              "fullTitle": "updateCartItem Controller should return 404 if product is not found in cart",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '67890', quantity: 3 };\nconst existingUser = {\n    cart: [{ productId: '12345', quantity: 2 }], // Product not in cart\n    save: saveStub,\n};\nuserStub.resolves(existingUser);\nawait updateCartItem(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product not found in cart.' })).to.be.true;",
              "err": {},
              "uuid": "fa07d025-d49b-41bb-b9cc-b6f5309342cf",
              "parentUUID": "73f48987-2b02-41a9-b297-d713a234b917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the product quantity in the cart if it exists",
              "fullTitle": "updateCartItem Controller should update the product quantity in the cart if it exists",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345', quantity: 5 };\nconst existingUser = {\n    cart: [{ productId: '12345', quantity: 2 }],\n    save: saveStub,\n};\nuserStub.resolves(existingUser);\nawait updateCartItem(req, res);\nexpect(existingUser.cart[0].quantity).to.equal(5); // Quantity updated\nexpect(saveStub.calledOnce).to.be.true; // User saved\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Cart updated successfully.',\n    cart: existingUser.cart,\n})).to.be.true;",
              "err": {},
              "uuid": "13b22df9-8981-46ac-ad2c-a3207a324320",
              "parentUUID": "73f48987-2b02-41a9-b297-d713a234b917",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "updateCartItem Controller should return 500 if there is a server error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = { username: 'existingUser', id: '12345', quantity: 2 };\nuserStub.rejects(new Error('Database error')); // Simulate a database error\nawait updateCartItem(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({\n    message: 'Internal Server Error',\n    error: 'Database error',\n})).to.be.true;",
              "err": {},
              "uuid": "9206ab84-579d-4a27-92c9-e31cac34593e",
              "parentUUID": "73f48987-2b02-41a9-b297-d713a234b917",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2f6d266-960c-405b-864f-1d3c65d9c54e",
            "9cf136dd-9cca-4ff0-98d9-9111064dddd8",
            "fa07d025-d49b-41bb-b9cc-b6f5309342cf",
            "13b22df9-8981-46ac-ad2c-a3207a324320",
            "9206ab84-579d-4a27-92c9-e31cac34593e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
          "title": "getreviews Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\get_submit_ReviewController\\getreview.test.js",
          "file": "\\unit_testing\\test_cases\\get_submit_ReviewController\\getreview.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getreviews Controller\"",
              "fullTitle": "getreviews Controller \"before each\" hook in \"getreviews Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock the request object\nreq = {\n    params: {\n        productId: '12345',  // Ensure productId is correctly set\n    }\n};\n// Mock the response object\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub().returnsThis(),\n};",
              "err": {},
              "uuid": "526655d7-8ffa-4c2b-8647-88e683f03085",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getreviews Controller\"",
              "fullTitle": "getreviews Controller \"after each\" hook in \"getreviews Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ab04f96a-61d7-4a7d-8a1c-1f7e8e57832a",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if productId is missing in params",
              "fullTitle": "getreviews Controller should return 400 if productId is missing in params",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.productId = undefined;  // Simulate missing productId\nawait getreviews(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product ID is required' })).to.be.true;",
              "err": {},
              "uuid": "10ccefd9-8fa9-4180-9e7c-4c07e8e3e372",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a database error",
              "fullTitle": "getreviews Controller should return 500 if there is a database error",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulate a database error\nfindStub = sinon.stub(Review, 'find').throws(new Error('Database error'));\nawait getreviews(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ message: 'Error fetching reviews', error: 'Database error' })).to.be.true;",
              "err": {},
              "uuid": "e6a4dd4e-f5e8-4115-a18c-6c967ee61dbc",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and reviews if productId exists and reviews are found",
              "fullTitle": "getreviews Controller should return 200 and reviews if productId exists and reviews are found",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const reviews = [\n    { productId: '12345', rating: '5', reviewText: 'Great!', date: new Date('2022-01-01') },\n    { productId: '12345', rating: '4', reviewText: 'Good!', date: new Date('2022-02-01') },\n];\n// Stub the Review.find() method to return mock data\nfindStub = sinon.stub(Review, 'find').returns(Promise.resolve(reviews));\nawait getreviews(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(reviews)).to.be.true;",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/LABs/Sem-5_SE_Project/Project/Software-Engineering-Project/Codes/server/unit_testing/test_cases/get_submit_ReviewController/getreview.test.js:58:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "1ba4894f-a12e-4acd-9e28-8fd2cb837af6",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and an empty array if no reviews are found for the productId",
              "fullTitle": "getreviews Controller should return 200 and an empty array if no reviews are found for the productId",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const reviews = [];\n// Stub the Review.find() method to return an empty array\nfindStub = sinon.stub(Review, 'find').returns(Promise.resolve(reviews));\nawait getreviews(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(reviews)).to.be.true;",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/LABs/Sem-5_SE_Project/Project/Software-Engineering-Project/Codes/server/unit_testing/test_cases/get_submit_ReviewController/getreview.test.js:70:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "7c37fd0c-5718-4fbc-921b-9004418a03a2",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if productId is missing in params",
              "fullTitle": "getreviews Controller should return 400 if productId is missing in params",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.params.productId = undefined;  // Simulate missing productId\nawait getreviews(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Product ID is required' })).to.be.true;",
              "err": {},
              "uuid": "3c8ae44d-2a2d-4e11-bca6-8d19b7e60151",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a database error",
              "fullTitle": "getreviews Controller should return 500 if there is a database error",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulate a database error\nfindStub = sinon.stub(Review, 'find').throws(new Error('Database error'));\nawait getreviews(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ message: 'Error fetching reviews', error: 'Database error' })).to.be.true;",
              "err": {},
              "uuid": "fc17150b-dd21-4787-badb-3dd1267648d0",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 and sorted reviews by date in descending order",
              "fullTitle": "getreviews Controller should return 200 and sorted reviews by date in descending order",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const reviews = [\n    { productId: '12345', rating: '5', reviewText: 'Great product!', date: new Date('2023-02-01') },\n    { productId: '12345', rating: '4', reviewText: 'Good product.', date: new Date('2023-01-01') },\n];\n// Stub the Review.find() method to return sorted reviews by date\nfindStub = sinon.stub(Review, 'find').returns(Promise.resolve(reviews));\nawait getreviews(req, res);\n// Verify if the reviews are sorted by date descending (most recent first)\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(reviews)).to.be.true;\nexpect(reviews[0].date).to.be.greaterThan(reviews[1].date);",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/LABs/Sem-5_SE_Project/Project/Software-Engineering-Project/Codes/server/unit_testing/test_cases/get_submit_ReviewController/getreview.test.js:105:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "996f45b9-a962-4ea1-b6b3-7c5db47b542b",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if no reviews are found for a non-existent productId",
              "fullTitle": "getreviews Controller should return 404 if no reviews are found for a non-existent productId",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "req.params.productId = 'non-existent-product-id';  // Simulate a non-existent productId\nconst reviews = [];\n// Stub the Review.find() method to return an empty array\nfindStub = sinon.stub(Review, 'find').returns(Promise.resolve(reviews));\nawait getreviews(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'No reviews found for this product' })).to.be.true;",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (file:///C:/LABs/Sem-5_SE_Project/Project/Software-Engineering-Project/Codes/server/unit_testing/test_cases/get_submit_ReviewController/getreview.test.js:120:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "e19547e6-e618-4450-b5e1-f8d17ede5b21",
              "parentUUID": "0374b87d-3d20-46d4-b6fd-5782aeddbda3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10ccefd9-8fa9-4180-9e7c-4c07e8e3e372",
            "e6a4dd4e-f5e8-4115-a18c-6c967ee61dbc",
            "3c8ae44d-2a2d-4e11-bca6-8d19b7e60151",
            "fc17150b-dd21-4787-badb-3dd1267648d0"
          ],
          "failures": [
            "1ba4894f-a12e-4acd-9e28-8fd2cb837af6",
            "7c37fd0c-5718-4fbc-921b-9004418a03a2",
            "996f45b9-a962-4ea1-b6b3-7c5db47b542b",
            "e19547e6-e618-4450-b5e1-f8d17ede5b21"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "df772bbf-6341-47f0-a80d-abacf7d734e0",
          "title": "submitReview Controller",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\get_submit_ReviewController\\submitreview.test.js",
          "file": "\\unit_testing\\test_cases\\get_submit_ReviewController\\submitreview.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"submitReview Controller\"",
              "fullTitle": "submitReview Controller \"before each\" hook in \"submitReview Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { body: {} };\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub(),\n};\nsaveStub = sinon.stub();",
              "err": {},
              "uuid": "983d4ccf-82a9-4b7c-bcde-db79718f31fb",
              "parentUUID": "df772bbf-6341-47f0-a80d-abacf7d734e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"submitReview Controller\"",
              "fullTitle": "submitReview Controller \"after each\" hook in \"submitReview Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0d89f193-d3cd-466d-a7ca-eea49f938ec8",
              "parentUUID": "df772bbf-6341-47f0-a80d-abacf7d734e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if rating is missing",
              "fullTitle": "submitReview Controller should return 400 if rating is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    productId: '12345',\n    reviewText: 'Nice product!',\n}; // Missing rating\nawait submitReview(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Missing required fields' })).to.be.true;",
              "err": {},
              "uuid": "48f61ea7-fa92-4251-9834-3c86083f5108",
              "parentUUID": "df772bbf-6341-47f0-a80d-abacf7d734e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if reviewText is missing",
              "fullTitle": "submitReview Controller should return 400 if reviewText is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    productId: '12345',\n    rating: '5', // Rating is present as a string\n}; // Missing reviewText\nawait submitReview(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Missing required fields' })).to.be.true;",
              "err": {},
              "uuid": "b253a029-c5de-4442-ac50-56e0518fa15c",
              "parentUUID": "df772bbf-6341-47f0-a80d-abacf7d734e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if productId is missing",
              "fullTitle": "submitReview Controller should return 400 if productId is missing",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    rating: '5', // Valid rating\n    reviewText: 'Amazing!',\n}; // Missing productId\nawait submitReview(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Missing required fields' })).to.be.true;",
              "err": {},
              "uuid": "39a88d59-7140-44cc-8ae7-46a131adbd67",
              "parentUUID": "df772bbf-6341-47f0-a80d-abacf7d734e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if rating is outside allowed range",
              "fullTitle": "submitReview Controller should return 400 if rating is outside allowed range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    productId: '12345',\n    rating: '6',  // invalid rating (greater than 5)\n    reviewText: 'Good product!'\n};\nawait submitReview(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Rating must be a number between 1 and 5' })).to.be.true;",
              "err": {},
              "uuid": "7cb00a48-aead-47a9-9308-f8b570fdf063",
              "parentUUID": "df772bbf-6341-47f0-a80d-abacf7d734e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if rating is less than the allowed range",
              "fullTitle": "submitReview Controller should return 400 if rating is less than the allowed range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.body = {\n    productId: '12345',\n    rating: '0',  // invalid rating (less than 1)\n    reviewText: 'Terrible product!'\n};\nawait submitReview(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Rating must be a number between 1 and 5' })).to.be.true;",
              "err": {},
              "uuid": "9c2be99b-10c6-4be4-aa9d-6ae9f1b55c18",
              "parentUUID": "df772bbf-6341-47f0-a80d-abacf7d734e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48f61ea7-fa92-4251-9834-3c86083f5108",
            "b253a029-c5de-4442-ac50-56e0518fa15c",
            "39a88d59-7140-44cc-8ae7-46a131adbd67",
            "7cb00a48-aead-47a9-9308-f8b570fdf063",
            "9c2be99b-10c6-4be4-aa9d-6ae9f1b55c18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
          "title": "getProducts",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\ProductController\\getproduct.test.js",
          "file": "\\unit_testing\\test_cases\\ProductController\\getproduct.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return all products when no category is provided",
              "fullTitle": "getProducts should return all products when no category is provided",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeProducts = [\n    { id: '1', category: 'electronics', title: 'Product 1', price: { amount: 100 } },\n    { id: '2', category: 'clothing', title: 'Product 2', price: { amount: 50 } },\n];\nconst req = { query: {} };  // No category filter\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\nsinon.stub(Product, 'find').resolves(fakeProducts);\nawait getProducts(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeProducts)).to.be.true;\nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "2d4b099f-98ca-4b2f-b2c9-46243883b7d1",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return products filtered by category",
              "fullTitle": "getProducts should return products filtered by category",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeProducts = [\n    { id: '1', category: 'electronics', title: 'Product 1', price: { amount: 100 } },\n    { id: '2', category: 'electronics', title: 'Product 2', price: { amount: 200 } },\n];\n    \nconst req = { query: { category: 'electronics' } };  // Category filter\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves(fakeProducts);\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeProducts)).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "d0f8f2c5-42d3-45c2-a928-6949d8ec3108",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no products match the category",
              "fullTitle": "getProducts should return an empty array if no products match the category",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeProducts = [];\n    \nconst req = { query: { category: 'nonexistent-category' } };  // No matching category\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves(fakeProducts);\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeProducts)).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "a6fb9ed3-775e-44ea-b58d-e2ce145a09a6",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "getProducts should return 500 if there is a server error",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { query: { category: 'electronics' } };\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').throws(new Error('Database error'));  // Simulate a DB error\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ message: 'Database error' })).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "003d6f70-c63b-48c8-957d-4058e5cf06ea",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return product with optional fields",
              "fullTitle": "getProducts should return product with optional fields",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeProduct = {\n    id: '1',\n    category: 'electronics',\n    url: 'http://example.com/product1',\n    detailUrl: 'http://example.com/product1/detail',\n    title: { en: 'Product 1' },\n    price: { amount: 100, currency: 'USD' },\n    quantity: 10,\n    description: 'Great product',\n    discount: '10%',\n    tagline: 'Best in class',\n};\n    \nconst req = { query: { category: 'electronics' } };\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves([fakeProduct]);\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith([fakeProduct])).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "45899a67-ec77-4953-bef3-c536143f1a0b",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle special characters in category filter",
              "fullTitle": "getProducts should handle special characters in category filter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeProduct = {\n    id: '1',\n    category: 'electronics/smartphones',\n    title: 'Smartphone 1',\n    price: { amount: 200 },\n};\n    \nconst req = { query: { category: 'electronics/smartphones' } };\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves([fakeProduct]);\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith([fakeProduct])).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "c12ab5a5-b11a-4128-877b-d66c0483d496",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no products are found",
              "fullTitle": "getProducts should return an empty array if no products are found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { query: {} };  // No category filter\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves([]);  // No products in the DB\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith([])).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "64be078b-96aa-4c29-a319-232fc0b17b64",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array for invalid category",
              "fullTitle": "getProducts should return an empty array for invalid category",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { query: { category: 'nonexistent-category' } };  // Invalid category filter\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves([]);  // No products in the DB matching the category\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith([])).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "7378a765-b5cd-4210-b3ef-9c4753750df5",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is an error in the database query",
              "fullTitle": "getProducts should return 500 if there is an error in the database query",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { query: { category: 'electronics' } };\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').throws(new Error('Database connection error'));  // Simulate DB error\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ message: 'Database connection error' })).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "cc0c513c-479c-4d4a-98fe-0b60f4118e4f",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return products for a numeric category filter",
              "fullTitle": "getProducts should return products for a numeric category filter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeProduct = { id: '1', category: '123', title: 'Product 1', price: { amount: 100 } };\n    \nconst req = { query: { category: '123' } };  // Numeric category filter\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves([fakeProduct]);\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith([fakeProduct])).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "68349a0c-d5c4-40ef-81a6-c279e48bb11e",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all products if the category filter is an empty string",
              "fullTitle": "getProducts should return all products if the category filter is an empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeProducts = [\n    { id: '1', category: 'electronics', title: 'Product 1', price: { amount: 100 } },\n    { id: '2', category: 'clothing', title: 'Product 2', price: { amount: 50 } },\n];\n    \nconst req = { query: { category: '' } };  // Empty category filter\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(Product, 'find').resolves(fakeProducts);\n    \nawait getProducts(req, res);\n    \nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(fakeProducts)).to.be.true;\n    \nProduct.find.restore(); // Restore the original function",
              "err": {},
              "uuid": "4b1334f0-fec5-4b10-a205-fc2ff4dac02c",
              "parentUUID": "951bd74c-25e1-46ce-ba61-23dfdb0c0607",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d4b099f-98ca-4b2f-b2c9-46243883b7d1",
            "d0f8f2c5-42d3-45c2-a928-6949d8ec3108",
            "a6fb9ed3-775e-44ea-b58d-e2ce145a09a6",
            "003d6f70-c63b-48c8-957d-4058e5cf06ea",
            "45899a67-ec77-4953-bef3-c536143f1a0b",
            "c12ab5a5-b11a-4128-877b-d66c0483d496",
            "64be078b-96aa-4c29-a319-232fc0b17b64",
            "7378a765-b5cd-4210-b3ef-9c4753750df5",
            "cc0c513c-479c-4d4a-98fe-0b60f4118e4f",
            "68349a0c-d5c4-40ef-81a6-c279e48bb11e",
            "4b1334f0-fec5-4b10-a205-fc2ff4dac02c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8b9000c4-ec1a-4927-b134-d2a9c202bd42",
          "title": "getProductById",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\ProductController\\getproductbyid.test.js",
          "file": "\\unit_testing\\test_cases\\ProductController\\getproductbyid.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getProductById\"",
              "fullTitle": "getProductById \"after each\" hook in \"getProductById\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore(); // Restore all the stubs after each test",
              "err": {},
              "uuid": "d8c12e50-a532-4d53-b82d-c19f0cc11e70",
              "parentUUID": "8b9000c4-ec1a-4927-b134-d2a9c202bd42",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return a product when a valid ID is passed",
              "fullTitle": "getProductById should return a product when a valid ID is passed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProduct = {\n    id: '123',\n    category: 'electronics',\n    title: { name: 'Product Name' },\n    price: { amount: 100 },\n    quantity: 10,\n    description: 'Product description',\n    discount: '10%',\n    tagline: 'Best deal'\n};\n// Stub Product.findOne to return mockProduct\nsinon.stub(Product, 'findOne').resolves(mockProduct);\nconst request = { params: { id: '123' } };\nconst response = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy()\n};\nawait getProductById(request, response);\nexpect(Product.findOne.calledOnce).to.be.true;\nexpect(response.status.calledWith(200)).to.be.true;\nexpect(response.json.calledWith(mockProduct)).to.be.true;",
              "err": {},
              "uuid": "5e1091f9-1b8e-45c5-a1a2-efffde5df2d6",
              "parentUUID": "8b9000c4-ec1a-4927-b134-d2a9c202bd42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a 404 status if product is not found",
              "fullTitle": "getProductById should return a 404 status if product is not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stub Product.findOne to return null (no product found)\nsinon.stub(Product, 'findOne').resolves(null);\nconst request = { params: { id: 'nonexistent' } };\nconst response = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy()\n};\nawait getProductById(request, response);\nexpect(Product.findOne.calledOnce).to.be.true;\nexpect(response.status.calledWith(404)).to.be.true;\nexpect(response.json.calledWith({ message: 'Product not found' })).to.be.true;",
              "err": {},
              "uuid": "9fb72cc7-2a4c-4bab-9d7f-c0dcd4ae16e7",
              "parentUUID": "8b9000c4-ec1a-4927-b134-d2a9c202bd42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle errors and return a 500 status",
              "fullTitle": "getProductById should handle errors and return a 500 status",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errorMessage = 'Database error';\n// Stub Product.findOne to simulate an error\nsinon.stub(Product, 'findOne').rejects(new Error(errorMessage));\nconst request = { params: { id: '123' } };\nconst response = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy()\n};\nawait getProductById(request, response);\nexpect(Product.findOne.calledOnce).to.be.true;\nexpect(response.status.calledWith(500)).to.be.true;\nexpect(response.json.calledWith({ message: errorMessage })).to.be.true;",
              "err": {},
              "uuid": "4151a2ee-f26a-4de1-a398-798e3f264075",
              "parentUUID": "8b9000c4-ec1a-4927-b134-d2a9c202bd42",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e1091f9-1b8e-45c5-a1a2-efffde5df2d6",
            "9fb72cc7-2a4c-4bab-9d7f-c0dcd4ae16e7",
            "4151a2ee-f26a-4de1-a398-798e3f264075"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5aecd9f4-e96f-4a2f-9773-a44dd9dc8aae",
          "title": "getUserProfile function",
          "fullFile": "C:\\LABs\\Sem-5_SE_Project\\Project\\Software-Engineering-Project\\Codes\\server\\unit_testing\\test_cases\\UserProfileController\\userprofile.test.js",
          "file": "\\unit_testing\\test_cases\\UserProfileController\\userprofile.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user profile when username is found",
              "fullTitle": "getUserProfile function should return user profile when username is found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeUser = {\n    firstname: 'John',\n    lastname: 'Doe',\n    username: 'johndoe',\n    email: 'john@example.com',\n    phone: '1234567890',\n    cart: [],\n};\nconst req = { query: { username: 'johndoe' } };\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\nsinon.stub(User, 'findOne').resolves(fakeUser);\nawait getUserProfile(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith({\n    firstname: 'John',\n    lastname: 'Doe',\n    username: 'johndoe',\n    email: 'john@example.com',\n    phone: '1234567890',\n    cart: [],\n})).to.be.true;\nUser.findOne.restore(); // Restore the original function",
              "err": {},
              "uuid": "60cc7404-903d-47ab-91ad-fdeea21b0a6b",
              "parentUUID": "5aecd9f4-e96f-4a2f-9773-a44dd9dc8aae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if username is missing",
              "fullTitle": "getUserProfile function should return 400 if username is missing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { query: {} }; // Missing username\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nawait getUserProfile(req, res);\n    \nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Username is required' })).to.be.true;",
              "err": {},
              "uuid": "264b3905-310c-4e71-a105-8edd9783605c",
              "parentUUID": "5aecd9f4-e96f-4a2f-9773-a44dd9dc8aae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user is not found",
              "fullTitle": "getUserProfile function should return 404 if user is not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { query: { username: 'nonexistentuser' } };\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(User, 'findOne').resolves(null); // No user found\n    \nawait getUserProfile(req, res);\n    \nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: 'User not found' })).to.be.true;\n    \nUser.findOne.restore(); // Restore the original function",
              "err": {},
              "uuid": "a40f9789-b7fb-4090-ac6e-6ee8f42b4165",
              "parentUUID": "5aecd9f4-e96f-4a2f-9773-a44dd9dc8aae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 if there is a server error",
              "fullTitle": "getUserProfile function should return 500 if there is a server error",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { query: { username: 'johndoe' } };\nconst res = { status: sinon.stub().returnsThis(), json: sinon.stub() };\n    \nsinon.stub(User, 'findOne').throws(new Error('Database error')); // Simulate DB error\n    \nawait getUserProfile(req, res);\n    \nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ message: 'Server error' })).to.be.true;\n    \nUser.findOne.restore(); // Restore the original function",
              "err": {},
              "uuid": "6c57e4c2-14bc-4026-b11b-6a72e786ee91",
              "parentUUID": "5aecd9f4-e96f-4a2f-9773-a44dd9dc8aae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60cc7404-903d-47ab-91ad-fdeea21b0a6b",
            "264b3905-310c-4e71-a105-8edd9783605c",
            "a40f9789-b7fb-4090-ac6e-6ee8f42b4165",
            "6c57e4c2-14bc-4026-b11b-6a72e786ee91"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "unit_testing/Report",
        "": true
      },
      "version": "6.2.0"
    }
  }
}